@model IEnumerable<ASI.Basecode.Services.Models.BookViewModel>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Home Page";
 
}

@section styles {
    <link rel="stylesheet" href="~/css/style.css" />
    <link rel="stylesheet" href="~/css/dashboard.css" />

    <link rel="stylesheet" href="~/css/pagination.css" /> 
}  
<style>
    .sidebar-content {
        height: auto;
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        overflow: auto;
        position: -webkit-sticky;
        position: sticky;
        top: 10%;
        box-shadow: 1px 1px 15px rgba(161, 182, 253, 0.825);
    }
 
     .Seemore {
    text-align: center;
}

    a:hover{
            color: #B64110;
            text-decoration: none;
    } 
</style>

<div class="background-div">
    <div class="center-text">
        Sniffing out great reads with your favorite book review buddy, Skooby.
    </div>
</div>
<section class="skooby-section skooby-dashboard">
    <h2 class="genre-title">Genres</h2>
    <div class="container-wrapper">
        <div class="section-wrapper content-wrapper" id="bookListContainer">
            @{
                var uniqueGenres = Model.SelectMany(book => book.GenreNames)
                .Distinct()
                .OrderBy(genre => genre);
 
            }

            @foreach (var genre in uniqueGenres)
            {
                var genreBooks = Model.Where(book => book.GenreNames.Contains(genre)).ToList();

                if (genreBooks.Any())
                {
                    <div class="book-genre">
                        <h4>@genre</h4>
                        <hr />
                        <div class="book-wrapper">
                            @foreach (var book in genreBooks.Take(4))
                            {
                                <div class="book-content">
                                    <a href="@Url.Action("ViewBook", "Home", new { id = book.Id })">
                                        <div class="book-image-preview">

                                            <img class="book-image" src="@(String.IsNullOrEmpty(book.Image) ? "/img/book-image-filler.png" : book.Image)" alt="@book.Name" />

                                        </div>
                                    </a>
                                    <div class="book-info-card" id="per-book-info-@book.Id">

                                        <h5 class="book-title book-text">@book.Name</h5>
                                        <p class="author-name book-text">by @string.Join(", ", book.AuthorNames) â€¢ @book.PublishedOn.Year</p>
                                        <p class="book-description book-text">@book.Description</p>
                                    </div>
                                    <h6 class="book-title book-text">@book.Name</h6>
                                </div>
                            }
                        </div>
                        @if (genreBooks.Count() > 4)
                        {
                            <div>
                                <a href="@Url.Action("GenreSeeMore", "Home", new { genre = @genre })"><p class="see-more-button">See More...</p></a>
                            </div>
                        }
                    </div>
                }
            }
            <div class="pagination-container">
                <div class="pagination">

                    <a href="#" onclick="showPage('prev')" class="prev-next">&lt;</a>

                    <span id="currentPage" class="current-page">1</span>/<span id="totalPages">1</span>

                    <a href="#" onclick="showPage('next')" class="prev-next">&gt;</a>
                </div>
            </div>
        </div>

        z
    </div>
</section>
 
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Initially hide remaining genres
        var isSeeMore = true;
        var remainingGenres = @Json.Serialize(remainingGenres);

        $("#seeMoreLink").click(function (e) {
            e.preventDefault();

            if (isSeeMore) {
                showRemainingGenres();
                $("#seeMoreLink").find(".filter-category").text("See Less");
            } else {
                hideRemainingGenres();
                $("#seeMoreLink").find(".filter-category").text("See More");
            }

            isSeeMore = !isSeeMore;
        });

        function showRemainingGenres() {
            var remainingGenresContainer = $("#filterCategoryContainer");

            for (var i = 0; i < remainingGenres.length; i++) {
                var genre = remainingGenres[i];
                var genreLink = $("<a>").attr("href", "#").addClass("genre-link").data("genre", genre);
                var genreTitle = $("<p>").addClass("filter-category-titles").text(genre);
                genreLink.append(genreTitle);
                remainingGenresContainer.append(genreLink);
            }
        }

        function hideRemainingGenres() {
            
            $(".genre-link").not(":lt(13)").remove();
        }

    });
</script> 


<script>
    // JavaScript code for client-side pagination
    var currentPage = 1;
    var booksPerPage = 5;

    function showPage(pageNumber) {
        var container = document.getElementById('bookListContainer');
        var books = container.getElementsByClassName('book-genre');

 
        for (var i = 0; i < books.length; i++) {
            books[i].style.display = 'none';
        }

        if (pageNumber === 'prev') {
            currentPage = Math.max(1, currentPage - 1);
        } else if (pageNumber === 'next') {
            currentPage = Math.min(Math.ceil(books.length / booksPerPage), currentPage + 1);
        } else {
            currentPage = pageNumber;
        }
 
        var startIndex = (currentPage - 1) * booksPerPage;
        var endIndex = startIndex + booksPerPage;

 
        for (var i = startIndex; i < endIndex && i < books.length; i++) {
            books[i].style.display = 'block';
        }
 
        document.getElementById('currentPage').innerText = currentPage;
        document.getElementById('totalPages').innerText = Math.ceil(books.length / booksPerPage);
    }

 

    showPage(1);
</script>
 

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $('.filter-category-titles').click(function () {
            var selectedGenre = $(this).text().trim();

            $('.book-genre').hide();


            $('.book-genre:has(h4:contains("' + selectedGenre + '"))').show();


            $('.pagination-container').hide();
        });



    });
</script>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $(".book-content").hover(
            function () {
                $(this).find(".book-info-card").show();
            },
            function () {
                $(this).find(".book-info-card").hide();
            }
        );
    });
</script>
@* JQuery Script for deletion (calls delete method in controller as http) *@
<script>
    $(document).ready(function () {
        $(".btn-danger").click(function () {
            var url = $(this).data("url");
            if (confirm("Are you sure you want to delete this book?")) {
                $.post(url, function (data) {
                    location.reload();
                }).fail(function () {
                    alert('Unable to delete.');
                });
            }
        });
    });
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>